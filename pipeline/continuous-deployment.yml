trigger:
  - main

pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: BuildApp
    displayName: Build App
    jobs:
      #- template: templates/app-build.yml@templates
    - job: 
      pool:
        name: Azure Pipelines
        vmImage: 'windows-latest'
      steps:
      - task: NuGetToolInstaller@1

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solution)'
          
      - task: CmdLine@2
        displayName: 'Build migrations bundle'
        inputs:
          script: |
            dotnet tool install --global dotnet-ef --version 8.0.4
            dotnet ef migrations bundle --verbose --self-contained -r win-x86 --project CheckYourEligibility.WebApp/CheckYourEligibility.WebApp.csproj
            mv efbundle.exe $(Build.ArtifactStagingDirectory)

      - task: VSBuild@1
        inputs:
          solution: '$(solution)'
          msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'

      - task: VSTest@2
        inputs:
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          resultsFolder: '$(build.ArtifactStagingDirectory)/Test/Results'
          otherConsoleOptions: '/collect:"Code Coverage;Format=Cobertura"'  # <<<< this is the important bit
          codeCoverageEnabled: True

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(build.ArtifactStagingDirectory)/Test/Results/**/*.xml'

      - task: DotNetCoreCLI@2
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'checkYourEligibilityAPI'

  - stage: RunCypressTests
    displayName: Run Cypress Tests
    jobs:
    - job: 'SetUpCypress'
      displayName: 'SetUpTests'
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: Bash@3
        inputs:
          targetType: inline
          script: |
           cd tests
           npm install
      - task: Bash@3
        displayName: 'RunTests'
        inputs:
         targetType: inline
         script: |
          cd tests
          export CYPRESS_API_HOST="https://ecs-test-as.azurewebsites.net"
          export CYPRESS_JWT_USERNAME=$(JWT_USERNAME)
          export CYPRESS_JWT_PASSWORD="$(JWT_PASSWORD)"
          npm run e2e:chrome

      - task: Bash@3
        condition: always()
        displayName: 'Generate report'
        inputs:
         targetType: inline
         script: |
          cd tests
          npm run combine:reports

      - task: PublishTestResults@2
        condition: always()
        displayName: 'Publish test results'
        inputs:
         testResultsFiles: '**/combined-report.xml'
         searchFolder: 'tests'

  
  - stage: DeployAppDev
    displayName: Deploy App Dev
    jobs:
    - deployment: devdeploy
      displayName: Deploy App Dev
      pool:
        name: Azure Pipelines
        vmImage: 'windows-latest'
      environment: DEVELOPMENT
      strategy:
        runOnce:
          preDeploy:
            steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                targetPath: '$(Pipeline.Workspace)'
            - task: AzureCLI@2
              displayName: 'Run Migrations'
              env:
                KEY_VAULT_NAME: ecs-dev-kv
              inputs:
                azureSubscription: 's203d.azdo.deployment'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  $(Pipeline.Workspace)/checkYourEligibilityAPI/efbundle.exe
                  
          deploy:
            steps:
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 's203d.azdo.deployment'
                appType: 'webApp'
                WebAppName: 'ecs-dev-as'
                packageForLinux: '$(Pipeline.Workspace)/checkYourEligibilityAPI/CheckYourEligibility.WebApp.zip'

  - stage: DeployAppTest
    displayName: Deploy App Test
    jobs:
    - deployment: testdeploy
      displayName: Deploy App Test
      pool:
        name: Azure Pipelines
        vmImage: 'windows-latest'
      environment: TEST
      strategy:
        runOnce:
          preDeploy:
            steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                targetPath: '$(Pipeline.Workspace)'
            - task: AzureCLI@2
              displayName: 'Run Migrations'
              env:
                KEY_VAULT_NAME: ecs-test-kv
              inputs:
                azureSubscription: 's203t.azdo.deployment'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  $(Pipeline.Workspace)/checkYourEligibilityAPI/efbundle.exe
                  
          deploy:
            steps:
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 's203t.azdo.deployment'
                appType: 'webApp'
                WebAppName: 'ecs-test-as'
                packageForLinux: '$(Pipeline.Workspace)/checkYourEligibilityAPI/CheckYourEligibility.WebApp.zip'