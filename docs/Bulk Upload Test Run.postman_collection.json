{
	"info": {
		"_postman_id": "dba7da62-2513-4ebc-a05e-2d695aa4ac37",
		"name": "Bulk Upload Test Run",
		"description": "# ‚õìÔ∏è Get started here\n\nPostman allows you to test your APIs using simple Javascript code. You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis template guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## üîñ **How to use this template**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\".\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" alt=\"\" height=\"103\" width=\"266\">\n\n**Step 3:** To customize this template, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## ‚ÑπÔ∏è Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "334351"
	},
	"item": [
		{
			"name": "Check from file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {\r",
							"  pm.response.to.have.status(202);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "text/plain"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"data\": {\r\n    \"nationalInsuranceNumber\": \"{{nationalInsuranceNumber}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n    \"nationalAsylumSeekerServiceNumber\": null,\r\n    \"group\":\"{{group}}\"\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/FreeSchoolMeals",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"FreeSchoolMeals"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {\r",
					"  url: pm.collectionVariables.get('baseUrl') + '/api/Login' ,\r",
					"  method: 'POST',\r",
					"  header: 'Content-Type:application/Json',\r",
					"  body: {\r",
					"    mode: 'application/json',\r",
					"    raw: JSON.stringify(\r",
					"        \r",
					"        \t{\r",
					" \"username\": pm.environment.get('username'),\r",
					"  \"password\": pm.environment.get('password')\r",
					"}\r",
					"        )\r",
					"  }\r",
					"};\r",
					"\r",
					"pm.sendRequest(echoPostRequest, function (err, res) {\r",
					"    console.log(err ? err : res.json());\r",
					"        if (err === null) {\r",
					"            console.log('Saving the token')\r",
					"            var responseJson = res.json();\r",
					"            pm.environment.set('token', responseJson.token)\r",
					"        }\r",
					"    });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://localhost:7117"
		},
		{
			"key": "expires",
			"value": "",
			"type": "string"
		}
	]
}