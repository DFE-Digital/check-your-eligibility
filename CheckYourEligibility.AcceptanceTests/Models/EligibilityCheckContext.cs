// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CheckYourEligibility.AcceptanceTests.Models;

public partial class EligibilityCheckContext : DbContext
{
    public EligibilityCheckContext()
    {
    }

    public EligibilityCheckContext(DbContextOptions<EligibilityCheckContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ApplicationStatuses> ApplicationStatuses { get; set; }

    public virtual DbSet<Applications> Applications { get; set; }

    public virtual DbSet<Audits> Audits { get; set; }

    public virtual DbSet<EligibilityCheck> EligibilityCheck { get; set; }

    public virtual DbSet<EligibilityCheckHashes> EligibilityCheckHashes { get; set; }

    public virtual DbSet<Establishments> Establishments { get; set; }

    public virtual DbSet<FreeSchoolMealsHmrc> FreeSchoolMealsHmrc { get; set; }

    public virtual DbSet<FreeSchoolMealsHo> FreeSchoolMealsHo { get; set; }

    public virtual DbSet<LocalAuthorities> LocalAuthorities { get; set; }

    public virtual DbSet<Users> Users { get; set; }
    public string ConnectionString { get;  set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(ConnectionString);
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ApplicationStatuses>(entity =>
        {
            entity.HasKey(e => e.ApplicationStatusId);

            entity.HasIndex(e => e.ApplicationId, "IX_ApplicationStatuses_ApplicationID");

            entity.Property(e => e.ApplicationStatusId).HasColumnName("ApplicationStatusID");
            entity.Property(e => e.ApplicationId)
                .IsRequired()
                .HasColumnName("ApplicationID");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Application).WithMany(p => p.ApplicationStatuses).HasForeignKey(d => d.ApplicationId);
        });

        modelBuilder.Entity<Applications>(entity =>
        {
            entity.HasKey(e => e.ApplicationId);

            entity.HasIndex(e => e.EligibilityCheckHashId, "IX_Applications_EligibilityCheckHashID");

            entity.HasIndex(e => e.EstablishmentId, "IX_Applications_EstablishmentId");

            entity.HasIndex(e => e.UserId, "IX_Applications_UserId");

            entity.HasIndex(e => e.Status, "idx_ApplicationStatus");

            entity.HasIndex(e => e.Reference, "idx_Reference").IsUnique();

            entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");
            entity.Property(e => e.ChildFirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChildLastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EligibilityCheckHashId).HasColumnName("EligibilityCheckHashID");
            entity.Property(e => e.ParentEmail)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParentFirstName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParentLastName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParentNationalAsylumSeekerServiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentNationalInsuranceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.EligibilityCheckHash).WithMany(p => p.Applications).HasForeignKey(d => d.EligibilityCheckHashId);

            entity.HasOne(d => d.Establishment).WithMany(p => p.Applications).HasForeignKey(d => d.EstablishmentId);

            entity.HasOne(d => d.User).WithMany(p => p.Applications).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Audits>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.Property(e => e.AuditId).HasColumnName("AuditID");
            entity.Property(e => e.Authentication)
                .IsRequired()
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("authentication");
            entity.Property(e => e.Method)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("method");
            entity.Property(e => e.Source)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("source");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TypeId)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("typeId");
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<EligibilityCheck>(entity =>
        {
            entity.HasIndex(e => e.EligibilityCheckHashId, "IX_EligibilityCheck_EligibilityCheckHashID");

            entity.Property(e => e.EligibilityCheckId).HasColumnName("EligibilityCheckID");
            entity.Property(e => e.CheckData)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.EligibilityCheckHashId).HasColumnName("EligibilityCheckHashID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.EligibilityCheckHash).WithMany(p => p.EligibilityCheck).HasForeignKey(d => d.EligibilityCheckHashId);
        });

        modelBuilder.Entity<EligibilityCheckHashes>(entity =>
        {
            entity.HasKey(e => e.EligibilityCheckHashId);

            entity.HasIndex(e => e.Hash, "idx_EligibilityCheckHash");

            entity.Property(e => e.EligibilityCheckHashId).HasColumnName("EligibilityCheckHashID");
            entity.Property(e => e.Hash)
                .IsRequired()
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Outcome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("HMRC");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Establishments>(entity =>
        {
            entity.HasKey(e => e.EstablishmentId);

            entity.HasIndex(e => e.LocalAuthorityId, "IX_Establishments_LocalAuthorityId");

            entity.Property(e => e.County).IsRequired();
            entity.Property(e => e.EstablishmentName).IsRequired();
            entity.Property(e => e.Locality).IsRequired();
            entity.Property(e => e.Postcode).IsRequired();
            entity.Property(e => e.Street).IsRequired();
            entity.Property(e => e.Town).IsRequired();
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.LocalAuthority).WithMany(p => p.Establishments).HasForeignKey(d => d.LocalAuthorityId);
        });

        modelBuilder.Entity<FreeSchoolMealsHmrc>(entity =>
        {
            entity.ToTable("FreeSchoolMealsHMRC");

            entity.Property(e => e.FreeSchoolMealsHmrcid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FreeSchoolMealsHMRCID");
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FreeSchoolMealsHo>(entity =>
        {
            entity.ToTable("FreeSchoolMealsHO");

            entity.Property(e => e.FreeSchoolMealsHoid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FreeSchoolMealsHOID");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Nass)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NASS");
        });

        modelBuilder.Entity<LocalAuthorities>(entity =>
        {
            entity.HasKey(e => e.LocalAuthorityId);

            entity.Property(e => e.LocalAuthorityId).ValueGeneratedNever();
            entity.Property(e => e.LaName).IsRequired();
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.HasIndex(e => new { e.Email, e.Reference }, "IX_Users_Email_Reference").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}